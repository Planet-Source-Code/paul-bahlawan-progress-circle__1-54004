VERSION 5.00
Begin VB.UserControl ProgressCircle 
   ClientHeight    =   615
   ClientLeft      =   0
   ClientTop       =   0
   ClientWidth     =   615
   ScaleHeight     =   615
   ScaleWidth      =   615
   Begin VB.PictureBox picPC 
      AutoRedraw      =   -1  'True
      FillColor       =   &H8000000D&
      ForeColor       =   &H8000000E&
      Height          =   495
      Left            =   0
      ScaleHeight     =   435
      ScaleWidth      =   435
      TabIndex        =   0
      Top             =   0
      Width           =   495
   End
End
Attribute VB_Name = "ProgressCircle"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = True
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'PROGRESS CIRCLE control
'-----------------------
'By Paul Bahlawan
'May 24 2004
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Option Explicit

'Mmmm pie....
Private Declare Function Pie Lib "gdi32" (ByVal hdc As Long, ByVal X1 As Long, ByVal Y1 As Long, ByVal X2 As Long, ByVal Y2 As Long, ByVal X3 As Long, ByVal Y3 As Long, ByVal X4 As Long, ByVal Y4 As Long) As Long

'Most of this stuff was generated by VB ActiveX Control Interface Wizard

'Default Property Values:
Const m_def_Chunk = 0
Const m_def_Min = 0
Const m_def_Max = 100
Const m_def_Value = 0
Const m_def_Caption = "%"
'Property Variables:
Dim m_Chunk As Boolean
Dim m_Min As Long
Dim m_Max As Long
Dim m_Value As Long
Dim m_Caption As String

Public Enum pcBdr
    pcNone = 0
    pc3D
End Enum

'WARNING! DO NOT REMOVE OR MODIFY THE FOLLOWING COMMENTED LINES!
'MappingInfo=picPC,picPC,-1,BackColor
Public Property Get BackColor() As OLE_COLOR
Attribute BackColor.VB_Description = "Returns/sets the background color used to display text and graphics in an object."
    BackColor = picPC.BackColor
End Property

Public Property Let BackColor(ByVal New_BackColor As OLE_COLOR)
    picPC.BackColor() = New_BackColor
    PropertyChanged "BackColor"
End Property

'WARNING! DO NOT REMOVE OR MODIFY THE FOLLOWING COMMENTED LINES!
'MappingInfo=picPC,picPC,-1,Enabled
Public Property Get Enabled() As Boolean
Attribute Enabled.VB_Description = "Returns/sets a value that determines whether an object can respond to user-generated events."
    Enabled = picPC.Enabled
End Property

Public Property Let Enabled(ByVal New_Enabled As Boolean)
    picPC.Enabled() = New_Enabled
    PropertyChanged "Enabled"
End Property

'WARNING! DO NOT REMOVE OR MODIFY THE FOLLOWING COMMENTED LINES!
'MappingInfo=picPC,picPC,-1,Font
Public Property Get Font() As Font
Attribute Font.VB_Description = "Returns a Font object."
Attribute Font.VB_UserMemId = -512
    Set Font = picPC.Font
End Property

Public Property Set Font(ByVal New_Font As Font)
    Set picPC.Font = New_Font
    PropertyChanged "Font"
End Property

'WARNING! DO NOT REMOVE OR MODIFY THE FOLLOWING COMMENTED LINES!
'MappingInfo=picPC,picPC,-1,BorderStyle
Public Property Get BorderStyle() As pcBdr
Attribute BorderStyle.VB_Description = "Returns/sets the border style for an object."
    BorderStyle = picPC.BorderStyle
End Property

Public Property Let BorderStyle(ByVal New_BorderStyle As pcBdr)
    picPC.BorderStyle() = New_BorderStyle
    PropertyChanged "BorderStyle"
End Property

'WARNING! DO NOT REMOVE OR MODIFY THE FOLLOWING COMMENTED LINES!
'MappingInfo=picPC,picPC,-1,Refresh
Public Sub Refresh()
Attribute Refresh.VB_Description = "Forces a complete repaint of a object."
    picPC.Refresh
End Sub

'WARNING! DO NOT REMOVE OR MODIFY THE FOLLOWING COMMENTED LINES!
'MappingInfo=picPC,picPC,-1,ForeColor
Public Property Get ForeColor() As OLE_COLOR
Attribute ForeColor.VB_Description = "Returns/sets the foreground color used to display text and graphics in an object."
    ForeColor = picPC.ForeColor
End Property

Public Property Let ForeColor(ByVal New_ForeColor As OLE_COLOR)
    picPC.ForeColor() = New_ForeColor
    PropertyChanged "ForeColor"
End Property

'WARNING! DO NOT REMOVE OR MODIFY THE FOLLOWING COMMENTED LINES!
'MemberInfo=8,0,2,0
Public Property Get Value() As Long
Attribute Value.VB_MemberFlags = "400"
    Value = m_Value
End Property

Public Property Let Value(ByVal New_Value As Long)
    If Ambient.UserMode = False Then Err.Raise 387
    m_Value = New_Value
    PropertyChanged "Value"
    DrawProgressCircle m_Value
End Property

'WARNING! DO NOT REMOVE OR MODIFY THE FOLLOWING COMMENTED LINES!
'MemberInfo=13,0,0,%
Public Property Get Caption() As String
Attribute Caption.VB_Description = "Leave blank for no caption, ""%"" for precent display or any other text for custom caption."
    Caption = m_Caption
End Property

Public Property Let Caption(ByVal New_Caption As String)
    m_Caption = New_Caption
    PropertyChanged "Caption"
End Property

'Initialize Properties for User Control
Private Sub UserControl_InitProperties()
    m_Value = m_def_Value
    m_Caption = m_def_Caption
    m_Min = m_def_Min
    m_Max = m_def_Max
    m_Chunk = m_def_Chunk
End Sub

'Load property values from storage
Private Sub UserControl_ReadProperties(PropBag As PropertyBag)

    picPC.BackColor = PropBag.ReadProperty("BackColor", &H8000000F)
    picPC.Enabled = PropBag.ReadProperty("Enabled", True)
    Set picPC.Font = PropBag.ReadProperty("Font", Ambient.Font)
    picPC.BorderStyle = PropBag.ReadProperty("BorderStyle", 1)
    picPC.ForeColor = PropBag.ReadProperty("ForeColor", &H8000000E)
    m_Value = PropBag.ReadProperty("Value", m_def_Value)
    m_Caption = PropBag.ReadProperty("Caption", m_def_Caption)
    m_Min = PropBag.ReadProperty("Min", m_def_Min)
    m_Max = PropBag.ReadProperty("Max", m_def_Max)
    picPC.FillColor = PropBag.ReadProperty("FillColor", &H8000000D)
'    m_Chunk = PropBag.ReadProperty("Chunk", m_def_Chunk)
    m_Chunk = PropBag.ReadProperty("Chunk", m_def_Chunk)
End Sub

Private Sub UserControl_Resize()
    picPC.Width = UserControl.Width
    picPC.Height = UserControl.Height
End Sub

'Write property values to storage
Private Sub UserControl_WriteProperties(PropBag As PropertyBag)

    Call PropBag.WriteProperty("BackColor", picPC.BackColor, &H8000000F)
    Call PropBag.WriteProperty("Enabled", picPC.Enabled, True)
    Call PropBag.WriteProperty("Font", picPC.Font, Ambient.Font)
    Call PropBag.WriteProperty("BorderStyle", picPC.BorderStyle, 1)
    Call PropBag.WriteProperty("ForeColor", picPC.ForeColor, &H8000000E)
    Call PropBag.WriteProperty("Value", m_Value, m_def_Value)
    Call PropBag.WriteProperty("Caption", m_Caption, m_def_Caption)
    Call PropBag.WriteProperty("Min", m_Min, m_def_Min)
    Call PropBag.WriteProperty("Max", m_Max, m_def_Max)
    Call PropBag.WriteProperty("FillColor", picPC.FillColor, &H8000000D)
    Call PropBag.WriteProperty("Chunk", m_Chunk, m_def_Chunk)
End Sub

'WARNING! DO NOT REMOVE OR MODIFY THE FOLLOWING COMMENTED LINES!
'MemberInfo=8,0,0,0
Public Property Get Min() As Long
Attribute Min.VB_Description = "Sets/returns the Minimum value for progress calculation."
    Min = m_Min
End Property

Public Property Let Min(ByVal New_Min As Long)
    m_Min = New_Min
    PropertyChanged "Min"
End Property

'WARNING! DO NOT REMOVE OR MODIFY THE FOLLOWING COMMENTED LINES!
'MemberInfo=8,0,0,100
Public Property Get Max() As Long
Attribute Max.VB_Description = "Sets/returns the Maximum value for progress calculation."
    Max = m_Max
End Property

Public Property Let Max(ByVal New_Max As Long)
    m_Max = New_Max
    PropertyChanged "Max"
End Property

Public Property Get FillColor() As OLE_COLOR
Attribute FillColor.VB_Description = "Returns/sets the color used to fill in shapes, circles, and boxes."
    FillColor = picPC.FillColor
End Property

Public Property Let FillColor(ByVal New_FillColor As OLE_COLOR)
    picPC.FillColor() = New_FillColor
    PropertyChanged "FillColor"
End Property

'WARNING! DO NOT REMOVE OR MODIFY THE FOLLOWING COMMENTED LINES!
'MemberInfo=0,0,0,0
Public Property Get Chunk() As Boolean
Attribute Chunk.VB_Description = "Set to TRUE to make 10% chunks "
    Chunk = m_Chunk
End Property

Public Property Let Chunk(ByVal New_Chunk As Boolean)
    m_Chunk = New_Chunk
    PropertyChanged "Chunk"
End Property


'All the good stuff happens here...
Private Sub DrawProgressCircle(Value As Long)
Dim Percent As Long
Dim t As Single
Dim X As Long
Dim Y As Long
Dim CenterX As Long
Dim CenterY As Long
Dim PCcaption As String
Dim temp As Long

    'Do some error checking/compensating
    If m_Max <= m_Min Then Exit Sub
    
    If Value > m_Max Then
        Value = m_Max
    ElseIf Value < m_Min Then
        Value = m_Min
    End If
    
    Percent = (Value - m_Min) / (m_Max - m_Min) * 100
    
    picPC.ScaleMode = vbPixels
    picPC.FillStyle = vbSolid
    picPC.Cls
    
    'For 0% we will leave it blank
    If Percent Then
        CenterX = picPC.ScaleWidth / 2
        CenterY = picPC.ScaleHeight / 2
        t = (Percent - 50) * 0.062831853 '(3.6 * 3.14159265 / 180)
        X = CenterX + CenterX * Sin(t)
        Y = CenterY + CenterY * Cos(t)
        
        'Draw the circle (well, pie actually)
        temp = picPC.ForeColor
        picPC.ForeColor = picPC.FillColor
        Pie picPC.hdc, 0, 0, picPC.ScaleWidth, picPC.ScaleHeight, CenterX, 0, X, Y
        picPC.ForeColor = temp
        
        'Make a hole in the middle
        temp = picPC.FillColor
        picPC.FillColor = picPC.BackColor
        picPC.Circle (CenterX, CenterY), (CenterX + CenterY) / 6, picPC.BackColor, , , picPC.ScaleHeight / picPC.ScaleWidth
        picPC.FillColor = temp
    
        'Divide it up
        If m_Chunk Then
            For temp = 0 To 359 Step 36
                t = temp * 3.14159265 / 180
                X = CenterX + (CenterX + 1) * Sin(t)
                Y = CenterY + (CenterY + 1) * Cos(t)
                picPC.Line (CenterX, CenterY)-(X, Y), picPC.BackColor
            Next
        End If
    
        'Add the caption
        If m_Caption <> "" Then
            If m_Caption = "%" Then
                PCcaption = Str(Int(Percent)) & "%"
            Else
                PCcaption = m_Caption
            End If
            
            picPC.CurrentX = CenterX - Len(PCcaption) * 2.8
            picPC.CurrentY = CenterY - 7
            picPC.Print PCcaption
        End If
    End If
End Sub

